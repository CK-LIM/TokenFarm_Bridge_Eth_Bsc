{"ast":null,"code":"import _regeneratorRuntime from \"/home/ubuntu/Desktop/Blockchain Talent Program/Yield_Farming/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ubuntu/Desktop/Blockchain Talent Program/Yield_Farming/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/ubuntu/Desktop/Blockchain Talent Program/Yield_Farming/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/ubuntu/Desktop/Blockchain Talent Program/Yield_Farming/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ubuntu/Desktop/Blockchain Talent Program/Yield_Farming/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/ubuntu/Desktop/Blockchain Talent Program/Yield_Farming/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/ubuntu/Desktop/Blockchain Talent Program/Yield_Farming/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ubuntu/Desktop/Blockchain Talent Program/Yield_Farming/src/components/App.js\";\nimport Web3 from 'web3';\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport DaiToken from '../abis/DaiToken.json';\nimport XToken from '../abis/XToken.json';\nimport TokenFarm from '../abis/TokenFarm.json';\nimport './App.css';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n                console.log(window.web3);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, networkId, daiTokenData, daiToken, daiTokenBalance, xTokenData, xToken, xTokenBalance, tokenFarmData, tokenFarm, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context2.sent;\n                console.log(networkId); // Load DaiToken\n\n                daiTokenData = DaiToken.networks[networkId];\n                console.log(daiTokenData);\n\n                if (!daiTokenData) {\n                  _context2.next = 22;\n                  break;\n                }\n\n                daiToken = new web3.eth.Contract(DaiToken.abi, daiTokenData.address);\n                this.setState({\n                  daiToken: daiToken\n                });\n                _context2.next = 17;\n                return daiToken.methods.balanceOf(this.state.account).call();\n\n              case 17:\n                daiTokenBalance = _context2.sent;\n                this.setState({\n                  daiTokenBalance: daiTokenBalance.toString()\n                });\n                console.log({\n                  balance: daiTokenBalance\n                });\n                _context2.next = 23;\n                break;\n\n              case 22:\n                window.alert('DaiToken contract not deployed to detected network.');\n\n              case 23:\n                // Load XToken\n                xTokenData = XToken.networks[networkId];\n                console.log(xTokenData);\n\n                if (!xTokenData) {\n                  _context2.next = 35;\n                  break;\n                }\n\n                xToken = new web3.eth.Contract(XToken.abi, xTokenData.address);\n                this.setState({\n                  xToken: xToken\n                });\n                _context2.next = 30;\n                return xToken.methods.balanceOf(this.state.account).call();\n\n              case 30:\n                xTokenBalance = _context2.sent;\n                this.setState({\n                  xTokenBalance: xTokenBalance.toString()\n                });\n                console.log({\n                  balance: xTokenBalance\n                });\n                _context2.next = 36;\n                break;\n\n              case 35:\n                window.alert('XToken contract not deployed to detected network.');\n\n              case 36:\n                // Load TokenFarm\n                tokenFarmData = TokenFarm.networks[networkId];\n                console.log(tokenFarmData);\n\n                if (!tokenFarmData) {\n                  _context2.next = 48;\n                  break;\n                }\n\n                tokenFarm = new web3.eth.Contract(TokenFarm.abi, tokenFarmData.address);\n                this.setState({\n                  tokenFarm: tokenFarm\n                });\n                _context2.next = 43;\n                return tokenFarm.methods.stakingBalance(this.state.account).call();\n\n              case 43:\n                stakingBalance = _context2.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                console.log({\n                  balance: stakingBalance\n                });\n                _context2.next = 49;\n                break;\n\n              case 48:\n                window.alert('TokenFarm contract not deployed to detected network.');\n\n              case 49:\n                this.setState({\n                  loading: false\n                });\n\n              case 50:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum); // Request account access if needed\n\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                // Legacy dapp browsers...\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } // Non-dapp browsers...\n                else {\n                    window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                  }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x0',\n      daiToken: {},\n      xToken: {},\n      tokenFarm: {},\n      daiTokenBalance: '0',\n      xTokenBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }\n      }, \"Stake Token!\"))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/ubuntu/Desktop/Blockchain Talent Program/Yield_Farming/src/components/App.js"],"names":["Web3","React","Component","Navbar","DaiToken","XToken","TokenFarm","App","loadWeb3","loadBlockchainData","console","log","window","web3","eth","getAccounts","accounts","setState","account","net","getId","networkId","daiTokenData","networks","daiToken","Contract","abi","address","methods","balanceOf","state","call","daiTokenBalance","toString","balance","alert","xTokenData","xToken","xTokenBalance","tokenFarmData","tokenFarm","stakingBalance","loading","ethereum","enable","currentProvider","props","maxWidth"],"mappings":"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","sourcesContent":["import Web3 from 'web3'\nimport React, { Component } from 'react'\nimport Navbar from './Navbar'\nimport DaiToken from '../abis/DaiToken.json'\nimport XToken from '../abis/XToken.json'\nimport TokenFarm from '../abis/TokenFarm.json'\nimport './App.css'\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n    console.log(window.web3)\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts()\n    console.log(accounts)\n\n    this.setState({ account: accounts[0] })\n\n    const networkId = await web3.eth.net.getId()\n    console.log(networkId)\n\n    // Load DaiToken\n    const daiTokenData = DaiToken.networks[networkId]\n    console.log(daiTokenData)\n    if (daiTokenData) {\n      const daiToken = new web3.eth.Contract(DaiToken.abi, daiTokenData.address)\n      this.setState({ daiToken })\n      let daiTokenBalance = await daiToken.methods.balanceOf(this.state.account).call()\n      this.setState({ daiTokenBalance: daiTokenBalance.toString() })\n      console.log({ balance: daiTokenBalance })\n    } else {\n      window.alert('DaiToken contract not deployed to detected network.')\n    }\n\n    // Load XToken\n    const xTokenData = XToken.networks[networkId]\n    console.log(xTokenData)\n    if (xTokenData) {\n      const xToken = new web3.eth.Contract(XToken.abi, xTokenData.address)\n      this.setState({ xToken })\n      let xTokenBalance = await xToken.methods.balanceOf(this.state.account).call()\n      this.setState({ xTokenBalance: xTokenBalance.toString() })\n      console.log({ balance: xTokenBalance })\n    } else {\n      window.alert('XToken contract not deployed to detected network.')\n    }\n\n    // Load TokenFarm\n    const tokenFarmData = TokenFarm.networks[networkId]\n    console.log(tokenFarmData)\n    if (tokenFarmData) {\n      const tokenFarm = new web3.eth.Contract(TokenFarm.abi, tokenFarmData.address)\n      this.setState({ tokenFarm })\n      let stakingBalance = await tokenFarm.methods.stakingBalance(this.state.account).call()\n      this.setState({ stakingBalance: stakingBalance.toString() })\n      console.log({ balance: stakingBalance })\n    } else {\n      window.alert('TokenFarm contract not deployed to detected network.')\n    }\n\n    this.setState({ loading: false})\n\n  }\n\n  async loadWeb3() {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      // Request account access if needed\n      await window.ethereum.enable();\n    }\n    // Legacy dapp browsers...\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    // Non-dapp browsers...\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '0x0',\n      daiToken: {},\n      xToken: {},\n      tokenFarm: {},\n      daiTokenBalance: '0',\n      xTokenBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '600px' }}>\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  href=\"http://www.dappuniversity.com/bootcamp\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                </a>\n\n                <h1>Stake Token!</h1>\n\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}