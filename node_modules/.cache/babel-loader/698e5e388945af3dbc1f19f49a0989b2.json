{"ast":null,"code":"import _regeneratorRuntime from \"/home/ubuntu/Desktop/Blockchain Talent Program/YieldFarming/Yield_Farming_compound/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ubuntu/Desktop/Blockchain Talent Program/YieldFarming/Yield_Farming_compound/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/ubuntu/Desktop/Blockchain Talent Program/YieldFarming/Yield_Farming_compound/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/ubuntu/Desktop/Blockchain Talent Program/YieldFarming/Yield_Farming_compound/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ubuntu/Desktop/Blockchain Talent Program/YieldFarming/Yield_Farming_compound/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/ubuntu/Desktop/Blockchain Talent Program/YieldFarming/Yield_Farming_compound/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/ubuntu/Desktop/Blockchain Talent Program/YieldFarming/Yield_Farming_compound/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ubuntu/Desktop/Blockchain Talent Program/YieldFarming/Yield_Farming_compound/src/components/App.js\";\nimport Web3 from 'web3';\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport DaiToken from '../abis/DaiToken.json';\nimport XToken from '../abis/XToken.json';\nimport TokenFarm from '../abis/TokenFarm.json';\nimport Main from './Main';\nimport './App.css';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n                console.log(window.web3);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, networkId, daiTokenData, daiToken, daiTokenBalance, xTokenData, xToken, xTokenBalance, _tokenFarmData, xTokenBalance_farm, tokenFarmData, tokenFarm, stakingBalance, farmInfo, stakingIndex, i, stake;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context2.sent;\n                console.log(networkId); // Load DaiToken\n\n                daiTokenData = DaiToken.networks[networkId];\n                console.log(daiTokenData);\n\n                if (!daiTokenData) {\n                  _context2.next = 22;\n                  break;\n                }\n\n                daiToken = new web3.eth.Contract(DaiToken.abi, daiTokenData.address);\n                this.setState({\n                  daiToken: daiToken\n                });\n                _context2.next = 17;\n                return daiToken.methods.balanceOf(this.state.account).call();\n\n              case 17:\n                daiTokenBalance = _context2.sent;\n                this.setState({\n                  daiTokenBalance: daiTokenBalance.toString()\n                });\n                console.log({\n                  balance: daiTokenBalance\n                });\n                _context2.next = 23;\n                break;\n\n              case 22:\n                window.alert('DaiToken contract not deployed to detected network.');\n\n              case 23:\n                // Load XToken\n                xTokenData = XToken.networks[networkId];\n                console.log(xTokenData);\n\n                if (!xTokenData) {\n                  _context2.next = 41;\n                  break;\n                }\n\n                xToken = new web3.eth.Contract(XToken.abi, xTokenData.address);\n                this.setState({\n                  xToken: xToken\n                });\n                _context2.next = 30;\n                return xToken.methods.balanceOf(this.state.account).call();\n\n              case 30:\n                xTokenBalance = _context2.sent;\n                _tokenFarmData = TokenFarm.networks[networkId];\n                _context2.next = 34;\n                return xToken.methods.balanceOf(_tokenFarmData.address).call();\n\n              case 34:\n                xTokenBalance_farm = _context2.sent;\n                this.setState({\n                  xTokenBalance: xTokenBalance.toString()\n                });\n                this.setState({\n                  xTokenBalance_farm: xTokenBalance_farm.toString()\n                });\n                console.log({\n                  balance: xTokenBalance\n                });\n                console.log({\n                  balance_farm: xTokenBalance_farm\n                });\n                _context2.next = 42;\n                break;\n\n              case 41:\n                window.alert('XToken contract not deployed to detected network.');\n\n              case 42:\n                // Load TokenFarm\n                tokenFarmData = TokenFarm.networks[networkId];\n                console.log(tokenFarmData);\n\n                if (!tokenFarmData) {\n                  _context2.next = 74;\n                  break;\n                }\n\n                tokenFarm = new web3.eth.Contract(TokenFarm.abi, tokenFarmData.address);\n                this.setState({\n                  tokenFarm: tokenFarm\n                });\n                _context2.next = 49;\n                return tokenFarm.methods.stakingBalance(this.state.account).call();\n\n              case 49:\n                stakingBalance = _context2.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                console.log({\n                  balance: stakingBalance\n                });\n                _context2.next = 54;\n                return tokenFarm.methods.farmInfo().call();\n\n              case 54:\n                farmInfo = _context2.sent;\n                this.setState({\n                  farmInfo: farmInfo.toString()\n                });\n                console.log({\n                  farmInfo: farmInfo\n                });\n                _context2.next = 59;\n                return tokenFarm.methods.stakingIndex().call();\n\n              case 59:\n                stakingIndex = _context2.sent;\n                this.setState({\n                  stakingIndex: stakingIndex.toString()\n                });\n                console.log({\n                  stakingIndex: stakingIndex\n                }); // let farmableSupply = await tokenFarm.methods.farmInfo().call()\n                // this.setState({ farmableSupply: farmableSupply.toString() })\n                // console.log({ farmableSupply: farmableSupply })\n                //Load stake\n\n                i = 1;\n\n              case 63:\n                if (!(i <= stakingIndex)) {\n                  _context2.next = 72;\n                  break;\n                }\n\n                _context2.next = 66;\n                return tokenFarm.methods.stake(i).call();\n\n              case 66:\n                stake = _context2.sent;\n                this.setState({\n                  stake: stake.toString()\n                });\n                console.log({\n                  stake: stake\n                });\n\n              case 69:\n                i++;\n                _context2.next = 63;\n                break;\n\n              case 72:\n                _context2.next = 75;\n                break;\n\n              case 74:\n                window.alert('TokenFarm contract not deployed to detected network.');\n\n              case 75:\n                this.setState({\n                  loading: false\n                });\n\n              case 76:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum); // Request account access if needed\n\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                // Legacy dapp browsers...\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } // Non-dapp browsers...\n                else {\n                    window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                  }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.stakeTokens = function (amount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.daiToken.methods.approve(_this.state.tokenFarm._address, amount).send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.state.tokenFarm.methods.stakeTokens(amount).send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.unstakeTokens = function (amount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.xToken.methods.approve(_this.state.tokenFarm._address, amount).send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.state.tokenFarm.methods.unstakeTokens().send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.emergencyUnstakeTokens = function (amount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.xToken.methods.approve(_this.state.tokenFarm._address, amount).send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.state.tokenFarm.methods.emergencyUnstakeTokens().send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: '0x0',\n      daiToken: {},\n      xToken: {},\n      tokenFarm: {},\n      daiTokenBalance: '0',\n      xTokenBalance: '0',\n      xTokenBalance_farm: '0',\n      stakingBalance: '0',\n      farmInfo: null,\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n\n      if (this.state.loading) {\n        content = /*#__PURE__*/React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 17\n          }\n        }, \"Loading...\");\n      } else {\n        content = /*#__PURE__*/React.createElement(Main, {\n          daiTokenBalance: this.state.daiTokenBalance,\n          xTokenBalance: this.state.xTokenBalance,\n          xTokenBalance_farm: this.state.xTokenBalance_farm,\n          stakingBalance: this.state.stakingBalance,\n          farmInfo: this.state.farmInfo,\n          stakeTokens: this.stakeTokens,\n          unstakeTokens: this.unstakeTokens,\n          emergencyUnstakeTokens: this.emergencyUnstakeTokens,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 17\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }\n      }), content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/ubuntu/Desktop/Blockchain Talent Program/YieldFarming/Yield_Farming_compound/src/components/App.js"],"names":["Web3","React","Component","Navbar","DaiToken","XToken","TokenFarm","Main","App","loadWeb3","loadBlockchainData","console","log","window","web3","eth","getAccounts","accounts","setState","account","net","getId","networkId","daiTokenData","networks","daiToken","Contract","abi","address","methods","balanceOf","state","call","daiTokenBalance","toString","balance","alert","xTokenData","xToken","xTokenBalance","tokenFarmData","xTokenBalance_farm","balance_farm","tokenFarm","stakingBalance","farmInfo","stakingIndex","i","stake","loading","ethereum","enable","currentProvider","props","stakeTokens","amount","approve","_address","send","from","on","hash","unstakeTokens","emergencyUnstakeTokens","content","maxWidth"],"mappings":"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","sourcesContent":["import Web3 from 'web3'\nimport React, { Component } from 'react'\nimport Navbar from './Navbar'\nimport DaiToken from '../abis/DaiToken.json'\nimport XToken from '../abis/XToken.json'\nimport TokenFarm from '../abis/TokenFarm.json'\nimport Main from './Main'\nimport './App.css'\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n    console.log(window.web3)\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts()\n    console.log(accounts)\n\n    this.setState({ account: accounts[0] })\n\n    const networkId = await web3.eth.net.getId()\n    console.log(networkId)\n\n    // Load DaiToken\n    const daiTokenData = DaiToken.networks[networkId]\n    console.log(daiTokenData)\n    if (daiTokenData) {\n      const daiToken = new web3.eth.Contract(DaiToken.abi, daiTokenData.address)\n      this.setState({ daiToken })\n      let daiTokenBalance = await daiToken.methods.balanceOf(this.state.account).call()\n      this.setState({ daiTokenBalance: daiTokenBalance.toString() })\n      console.log({ balance: daiTokenBalance })\n    } else {\n      window.alert('DaiToken contract not deployed to detected network.')\n    }\n\n    // Load XToken\n    const xTokenData = XToken.networks[networkId]\n    console.log(xTokenData)\n    if (xTokenData) {\n      const xToken = new web3.eth.Contract(XToken.abi, xTokenData.address)\n      this.setState({ xToken })\n      let xTokenBalance = await xToken.methods.balanceOf(this.state.account).call()\n      const tokenFarmData = TokenFarm.networks[networkId]\n      let xTokenBalance_farm = await xToken.methods.balanceOf(tokenFarmData.address).call()\n      this.setState({ xTokenBalance: xTokenBalance.toString() })\n      this.setState({ xTokenBalance_farm: xTokenBalance_farm.toString() })\n      console.log({ balance: xTokenBalance })\n      console.log({ balance_farm: xTokenBalance_farm })\n    } else {\n      window.alert('XToken contract not deployed to detected network.')\n    }\n\n    // Load TokenFarm\n    const tokenFarmData = TokenFarm.networks[networkId]\n    console.log(tokenFarmData)\n    if (tokenFarmData) {\n      const tokenFarm = new web3.eth.Contract(TokenFarm.abi, tokenFarmData.address)\n      this.setState({ tokenFarm })\n      let stakingBalance = await tokenFarm.methods.stakingBalance(this.state.account).call()\n      this.setState({ stakingBalance: stakingBalance.toString() })\n      console.log({ balance: stakingBalance })\n\n      let farmInfo = await tokenFarm.methods.farmInfo().call()\n      this.setState({ farmInfo: farmInfo.toString() })\n      console.log({ farmInfo: farmInfo })\n\n      let stakingIndex = await tokenFarm.methods.stakingIndex().call()\n      this.setState({ stakingIndex: stakingIndex.toString() })\n      console.log({ stakingIndex: stakingIndex })\n\n      // let farmableSupply = await tokenFarm.methods.farmInfo().call()\n      // this.setState({ farmableSupply: farmableSupply.toString() })\n      // console.log({ farmableSupply: farmableSupply })\n\n      //Load stake\n      for (var i = 1; i <= stakingIndex; i++) {\n        let stake = await tokenFarm.methods.stake(i).call()\n        this.setState({stake: stake.toString()})\n        console.log({stake: stake})\n      }\n\n\n    } else {\n      window.alert('TokenFarm contract not deployed to detected network.')\n    }\n\n    this.setState({ loading: false })\n  }\n\n  async loadWeb3() {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      // Request account access if needed\n      await window.ethereum.enable();\n    }\n    // Legacy dapp browsers...\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    // Non-dapp browsers...\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  stakeTokens = (amount) => {\n    this.setState({ loading: true })\n    this.state.daiToken.methods.approve(this.state.tokenFarm._address, amount).send({ from: this.state.account }).on('transactionHash', (hash) => {\n      this.state.tokenFarm.methods.stakeTokens(amount).send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n    })\n  }\n\n  unstakeTokens = (amount) => {\n    this.setState({ loading: true })\n    this.state.xToken.methods.approve(this.state.tokenFarm._address, amount).send({ from: this.state.account }).on('transactionHash', (hash) => {\n      this.state.tokenFarm.methods.unstakeTokens().send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n    })\n  }\n\n  emergencyUnstakeTokens = (amount) => {\n    this.setState({ loading: true })\n    this.state.xToken.methods.approve(this.state.tokenFarm._address, amount).send({ from: this.state.account }).on('transactionHash', (hash) => {\n      this.state.tokenFarm.methods.emergencyUnstakeTokens().send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '0x0',\n      daiToken: {},\n      xToken: {},\n      tokenFarm: {},\n      daiTokenBalance: '0',\n      xTokenBalance: '0',\n      xTokenBalance_farm: '0',\n      stakingBalance: '0',\n      farmInfo: null,\n      loading: true\n    }\n  }\n\n  render() {\n    let content\n    if (this.state.loading) {\n      content = <p id=\"loader\" className=\"text-center\">Loading...</p>\n    } else {\n      content = <Main\n        daiTokenBalance={this.state.daiTokenBalance}\n        xTokenBalance={this.state.xTokenBalance}\n        xTokenBalance_farm={this.state.xTokenBalance_farm}\n        stakingBalance={this.state.stakingBalance}\n        farmInfo={this.state.farmInfo}\n        stakeTokens={this.stakeTokens}\n        unstakeTokens={this.unstakeTokens}\n        emergencyUnstakeTokens={this.emergencyUnstakeTokens}\n      />\n    }\n\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '600px' }}>\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  href=\"http://www.dappuniversity.com/bootcamp\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                </a>\n\n                {content}\n\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}